/*
File: src/components/Project/ProjectGrid.module.css
V5 - Added Skeleton Loader Styles + Compression
*/

/* === Grid Wrapper === */
.projectGridWrapper {
    position: relative; z-index: 10; width: 100%; max-width: 100%;
    box-sizing: border-box; transition: filter 0.2s ease-in-out;
  }
  .projectGridWrapper.isFiltering::before { content: ''; position: absolute; inset: 0; background: linear-gradient(rgba(var(--accent-primary-rgb), 0.05), rgba(var(--accent-highlight-rgb), 0.05)); animation: glitch-flicker 0.25s steps(2, end) forwards; pointer-events: none; z-index: 100; }
  @keyframes glitch-flicker { 0% { opacity: 0.5; transform: translateX(2px); } 25% { opacity: 0.2; transform: translateY(-1px); } 50% { opacity: 0.6; transform: translateX(-2px); } 75% { opacity: 0.3; transform: translateY(1px) } 100% { opacity: 0; transform: none; } }
  
  /* === Tag Cloud (Compressed) === */
  .tagCloudSection { margin-bottom: 1rem; padding: 0.8rem 1rem; border: 1px solid rgba(var(--accent-primary-rgb), 0.25); border-radius: var(--radius-glow); background: linear-gradient(135deg, rgba(var(--bg-secondary-rgb), 0.3) 0%, rgba(var(--bg-tertiary-rgb), 0.5) 100%), var(--bg-noise-soft); backdrop-filter: blur(5px); box-shadow: 0 1px 8px rgba(var(--bg-primary-rgb), 0.25), inset 0 0 6px rgba(var(--accent-primary-rgb), 0.08); display: flex; flex-direction: column; gap: 0.8rem; width: 100%; max-width: 100%; box-sizing: border-box; }
  .cloudGroup {}
  .cloudLabel { font-family: var(--font-mono); text-transform: uppercase; font-size: 0.7rem; color: var(--accent-primary); letter-spacing: 0.1em; margin-bottom: 0.5rem; padding-left: 0.6rem; border-left: 3px solid var(--accent-primary); line-height: 1.2; text-shadow: 0 0 5px rgba(var(--accent-primary-rgb), 0.5); }
  .cloudItems { display: flex; flex-wrap: wrap; gap: 0.4rem; }
  .cloudTag { font-family: var(--font-mono); font-size: 0.8rem; text-transform: lowercase; padding: 0.25rem 0.7rem; border-radius: 3px; border: 1px solid rgba(var(--accent-highlight-rgb), 0.3); transition: all var(--transition-fast); cursor: pointer; background-color: rgba(var(--bg-tertiary-rgb), 0.6); color: var(--text-secondary); line-height: 1.3; box-shadow: 1px 1px 1px rgba(var(--bg-primary-rgb), 0.5); white-space: nowrap; }
  .cloudTag:hover { border-color: var(--accent-highlight); background-color: rgba(var(--accent-highlight-rgb), 0.15); color: var(--accent-highlight); transform: translateY(-1px) scale(1.01); box-shadow: 0 1px 8px rgba(var(--accent-highlight-rgb), 0.3); }
  .cloudTag.active { color: var(--bg-primary); font-weight: 600; transform: translateY(0px) scale(1); }
  .cloudTag.category.active { background-color: var(--accent-primary); border-color: var(--accent-primary); box-shadow: 0 0 8px rgba(var(--accent-primary-rgb), 0.5); }
  .cloudTag.tag.active { background-color: var(--accent-highlight); border-color: var(--accent-highlight); box-shadow: 0 0 8px rgba(var(--accent-highlight-rgb), 0.5); }
  .cloudTag.more { opacity: 0.5; cursor: default; background-color: transparent; border-color: transparent; box-shadow: none; pointer-events: none; }
  
  /* === Filter Panel (Compressed) === */
  .filterPanel { margin-bottom: 1rem; border-radius: var(--radius-base); border: 1px solid var(--accent-highlight); background: linear-gradient(160deg, rgba(var(--bg-secondary-rgb), 0.96) 0%, rgba(var(--bg-primary-rgb), 0.98) 100%); backdrop-filter: blur(8px); box-shadow: 0 3px 12px rgba(var(--bg-primary-rgb), 0.35), inset 0 1px 2px rgba(var(--bg-primary-rgb), 0.4); padding: 0.6rem 0.8rem; position: sticky; top: calc(var(--header-height, 60px) + 0.8rem); z-index: 50; transition: box-shadow var(--transition-medium); width: 100%; max-width: 100%; box-sizing: border-box; }
  .filterPanel:focus-within { box-shadow: 0 4px 15px rgba(var(--bg-primary-rgb), 0.4), inset 0 0 15px rgba(var(--accent-highlight-rgb), 0.15), inset 0 1px 2px rgba(var(--bg-primary-rgb), 0.4), 0 0 0 2.5px rgba(var(--accent-highlight-rgb), 0.4); }
  .filterTopRow { display: flex; align-items: center; gap: 0.6rem; padding-bottom: 0.6rem; margin-bottom: 0.6rem; border-bottom: 1px solid rgba(var(--accent-highlight-rgb), 0.25); }
  .filterToggleButton { display: inline-flex; align-items: center; gap: 0.5rem; font-family: var(--font-mono); font-size: 0.8rem; text-transform: uppercase; letter-spacing: 0.1em; color: var(--accent-highlight); background: linear-gradient(rgba(var(--accent-highlight-rgb), 0.1), rgba(var(--accent-highlight-rgb), 0.15)); border: 1px solid var(--accent-highlight); border-radius: 3px; cursor: pointer; padding: 0.5rem 1rem; transition: all var(--transition-fast); white-space: nowrap; flex-shrink: 0; box-shadow: 0 0 10px rgba(var(--accent-highlight-rgb), 0.3), 1px 1px 2px rgba(0,0,0,0.4); text-shadow: 0 0 3px rgba(var(--accent-highlight-rgb), 0.5); }
  .filterToggleButton:hover { background: linear-gradient(rgba(var(--accent-highlight-rgb), 0.2), rgba(var(--accent-highlight-rgb), 0.25)); color: white; border-color: white; box-shadow: 0 0 15px rgba(var(--accent-highlight-rgb), 0.5), 1px 2px 3px rgba(0,0,0,0.4); transform: translateY(-1px); text-shadow: 0 0 5px white; }
  .filterToggleButton svg { transition: transform 0.2s ease-in-out; }
  .filterToggleButton[aria-expanded="true"] svg { transform: rotate(180deg); }
  .activeFilterIndicator { display: inline-block; margin-left: 0.5rem; background-color: var(--accent-alert); color: var(--bg-primary); font-size: 0.75rem; font-weight: bold; width: 18px; height: 18px; border-radius: 50%; line-height: 18px; text-align: center; vertical-align: middle; animation: pulse-alert-strong 1.2s infinite ease-in-out; box-shadow: 0 0 5px var(--accent-alert); }
  @keyframes pulse-alert-strong { 0%, 100% { transform: scale(1); box-shadow: 0 0 3px 0 var(--accent-alert); opacity: 1; } 50% { transform: scale(1.15); box-shadow: 0 0 8px 3px rgba(var(--accent-alert-rgb), 0.5); opacity: 0.8; } }
  .searchInputWrapper { position: relative; flex-grow: 1; min-width: 130px; }
  .searchIcon { position: absolute; left: 0.7rem; top: 50%; transform: translateY(-50%); color: var(--text-muted); opacity: 0.6; pointer-events: none; z-index: 1; transition: color 0.2s ease, opacity 0.2s ease; width: 16px; height: 16px; }
  .searchInputWrapper:focus-within .searchIcon { color: var(--accent-highlight); opacity: 1; }
  .searchInput { width: 100%; font-size: 0.9rem !important; /* padding-left handled inline */ }
  .resetButton { color: var(--text-muted); background: rgba(var(--bg-tertiary-rgb), 0.5); border: 1px solid rgba(var(--text-muted-rgb), 0.3); cursor: pointer; display: inline-flex; align-items: center; padding: 0.5rem; border-radius: 3px; transition: all var(--transition-fast); white-space: nowrap; flex-shrink: 0; margin-left: auto; box-shadow: 1px 1px 2px rgba(0,0,0,0.3); }
  .resetButtonText { font-family: var(--font-mono); font-size: 0.7rem; margin-left: 0.4rem; text-transform: uppercase; letter-spacing: 0.05em; }
  .resetButton:hover:not(:disabled) { color: var(--accent-alert); background-color: rgba(var(--accent-alert-rgb), 0.15); border-color: var(--accent-alert); transform: scale(1.03); box-shadow: 0 0 8px rgba(var(--accent-alert-rgb), 0.4), 1px 1px 2px rgba(0,0,0,0.3); }
  .resetButton:disabled { opacity: 0.4; cursor: default; box-shadow: inset 0 1px 2px rgba(0,0,0,0.3); }
  .resetButton:disabled .resetButtonText { display: none; }
  .resetButton svg { transition: transform 0.3s ease; }
  .resetButton:hover:not(:disabled) svg { transform: rotate(-180deg); }
  
  /* Filter Content (Compressed) */
  .filterContent { display: flex; flex-direction: column; gap: 1rem; animation: slide-down-fade 0.35s ease-out forwards; overflow: hidden; padding-top: 0.4rem; }
  @keyframes slide-down-fade { from { max-height: 0; opacity: 0; transform: translateY(-10px); } to { max-height: 700px; opacity: 1; transform: translateY(0); } }
  .filterGroupsWrapper { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 0.8rem 1rem; margin-bottom: 0.8rem; }
  .filterGroup { border: 1px solid rgba(var(--accent-highlight-rgb), 0.2); border-radius: var(--radius-base); padding: 0.8rem 1rem; background: linear-gradient(rgba(var(--bg-primary-rgb), 0.5), rgba(var(--bg-secondary-rgb), 0.6)); box-shadow: inset 0 1px 4px rgba(var(--bg-primary-rgb), 0.6); display: flex; flex-direction: column; gap: 0.6rem; }
  .filterGroupGithub { background: linear-gradient(rgba(var(--bg-tertiary-rgb), 0.6), rgba(var(--bg-secondary-rgb), 0.7)); border-color: rgba(var(--accent-secondary-rgb), 0.4); box-shadow: inset 0 0 12px rgba(var(--accent-secondary-rgb), 0.15); }
  .githubInputsGrid { display: grid; grid-template-columns: 1fr 1fr; gap: 0.6rem 0.8rem; align-items: end; }
  .filterLabel { font-family: var(--font-mono); font-size: 0.7rem; font-weight: 600; color: var(--text-secondary); text-transform: uppercase; letter-spacing: 0.1em; display: block; margin-bottom: 0.2rem; line-height: 1.3; }
  .filterLabel.sublabel { font-size: 0.65rem; color: var(--text-muted); margin-bottom: 0.3rem; text-transform: none; letter-spacing: 0.05em; font-weight: 400; }
  .filterOptions { display: flex; flex-wrap: wrap; gap: 0.4rem 0.5rem; align-items: center; }
  .scrollableOptions { max-height: 90px; overflow-y: auto; padding: 4px; border: 1px solid rgba(var(--bg-tertiary-rgb), 0.9); border-radius: var(--radius-base); background: rgba(var(--bg-primary-rgb), 0.6); scrollbar-width: thin; scrollbar-color: var(--accent-highlight) rgba(var(--bg-tertiary-rgb), 0.8); }
  .scrollableOptions::-webkit-scrollbar { width: 8px; } .scrollableOptions::-webkit-scrollbar-track { background: rgba(var(--bg-tertiary-rgb), 0.8); border-radius: 4px; } .scrollableOptions::-webkit-scrollbar-thumb { background-color: var(--accent-highlight); border-radius: 4px; border: 2px solid rgba(var(--bg-tertiary-rgb), 0.8); } .scrollableOptions::-webkit-scrollbar-thumb:hover { background-color: white; }
  .filterButton { font-family: var(--font-mono); font-size: 0.75rem; text-transform: none; padding: 0.3rem 0.7rem; border-radius: 3px; border: 1px solid rgba(var(--accent-primary-rgb), 0.4); transition: all var(--transition-fast); cursor: pointer; background-color: rgba(var(--bg-tertiary-rgb), 0.6); color: var(--text-secondary); line-height: 1.4; box-shadow: 1px 1px 2px rgba(var(--bg-primary-rgb), 0.5); display: inline-flex; align-items: center; gap: 0.3rem; white-space: nowrap; }
  .filterButton:hover { border-color: var(--accent-primary); background-color: rgba(var(--accent-primary-rgb), 0.2); color: var(--accent-primary); transform: translateY(-1px); box-shadow: 0 0 10px rgba(var(--accent-primary-rgb), 0.35), 1px 1px 2px rgba(var(--bg-primary-rgb), 0.5); }
  .filterButton.active { color: var(--bg-primary); font-weight: 600; box-shadow: 0 0 12px rgba(var(--accent-highlight-rgb), 0.6), inset 0 0 6px rgba(var(--bg-primary-rgb), 0.4); transform: translateY(0px); }
  .filterButton.category.active { background-color: var(--accent-primary); border-color: var(--accent-primary); } .filterButton.tag.active { background-color: var(--accent-secondary); border-color: var(--accent-secondary); } .filterButton.language.active { background-color: var(--accent-highlight); border-color: var(--accent-highlight); } .filterButton.sort.active { background-color: var(--accent-muted1); border-color: var(--accent-muted1); color: var(--bg-primary); }
  .filterInput { display: block; width: 100%; background-color: rgba(var(--bg-primary-rgb), 0.8) !important; color: var(--text-primary) !important; border: 1px solid rgba(var(--accent-highlight-rgb), 0.4) !important; border-radius: 3px !important; padding: 0.6rem 0.8rem !important; font-family: var(--font-mono); font-size: 0.9rem; appearance: textfield; transition: border-color var(--transition-fast), box-shadow var(--transition-fast), background-color var(--transition-fast); line-height: 1.4; box-shadow: inset 0 2px 5px rgba(var(--bg-primary-rgb), 0.7); }
  .filterInput::-webkit-outer-spin-button, .filterInput::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }
  .filterInput::placeholder { color: var(--text-muted); opacity: 0.6; font-style: italic;}
  .filterInput:focus { outline: none; border-color: var(--accent-highlight) !important; box-shadow: inset 0 2px 5px rgba(var(--bg-primary-rgb), 0.5), 0 0 0 3px rgba(var(--accent-highlight-rgb), 0.3) !important; background-color: rgba(var(--bg-secondary-rgb), 0.7) !important; }
  .sortControls { margin-top: 0.8rem; padding-top: 0.8rem; border-top: 1px solid rgba(var(--accent-highlight-rgb), 0.2); }
  .filterButton.sort .icon { opacity: 0.7; width: 14px; height: 14px; margin-left: 0.3rem; transition: transform 0.2s ease-out; }
  .filterButton.sort.active .icon { opacity: 1; }
  .filterResetInline { margin-top: 0.8rem; padding-top: 0.8rem; border-top: 1px dashed rgba(var(--accent-highlight-rgb), 0.3); text-align: center; }
  .resetButtonInline { font-family: var(--font-mono); font-size: 0.8rem; color: var(--text-muted); background: rgba(var(--bg-tertiary-rgb), 0.7); border: 1px solid rgba(var(--accent-alert-rgb), 0.4); cursor: pointer; display: inline-flex; align-items: center; padding: 0.5rem 1rem; border-radius: 3px; transition: all var(--transition-fast); box-shadow: 1px 1px 2px rgba(0,0,0,0.3); }
  .resetButtonInline:hover { color: var(--accent-alert); background-color: rgba(var(--accent-alert-rgb), 0.2); border-color: var(--accent-alert); box-shadow: 0 0 9px rgba(var(--accent-alert-rgb), 0.4), 1px 1px 2px rgba(0,0,0,0.3); transform: translateY(-1px); }
  .resetButtonInline svg { margin-right: 0.5rem; }
  
  /* === Project Grid Layout (Compressed) === */
  .projectsGrid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 240px), 1fr));
    gap: 1rem; /* Reduced */
    padding-top: 0.8rem; /* Reduced */
    width: 100%; max-width: 100%; box-sizing: border-box;
  }
  
  /* === Skeleton Loader Styles === */
  .skeletonCard {
    background: linear-gradient(170deg, var(--bg-secondary) 0%, var(--bg-tertiary) 100%);
    border-radius: var(--radius-base);
    border: 1px solid rgba(var(--accent-primary-rgb), 0.1);
    box-shadow: 2px 2px 0px rgba(var(--bg-primary-rgb), 0.4), var(--shadow-inset-light);
    overflow: hidden;
    height: 250px; /* Approximate height of a card, adjust as needed */
    display: flex;
    flex-direction: column;
    opacity: 0.7;
    animation: pulse-bg 1.8s infinite alternate ease-in-out;
  }
  
  .skeletonImage {
    height: 140px; /* Approximate image height */
    background-color: rgba(var(--bg-tertiary-rgb), 0.8);
  }
  
  .skeletonContent {
    padding: 0.4rem 0.6rem;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: 0.4rem; /* Gap between lines */
  }
  
  .skeletonLine {
    height: 0.75rem; /* Height of text lines */
    background-color: rgba(var(--bg-tertiary-rgb), 0.9);
    border-radius: var(--radius-sm);
  }
  
  .skeletonTags {
    display: flex;
    gap: 0.3rem;
    margin-top: auto; /* Push tags to bottom */
  }
  
  .skeletonTag {
    height: 0.6rem;
    width: 40px; /* Approximate tag width */
    background-color: rgba(var(--bg-tertiary-rgb), 0.7);
    border-radius: var(--radius-sm);
  }
  
  @keyframes pulse-bg {
    from { opacity: 0.5; }
    to { opacity: 0.8; }
  }
  
  
  /* === No Results Message (Compressed) === */
  .noResultsMessage { grid-column: 1 / -1; text-align: center; color: var(--text-muted); padding: 2.5rem 1rem; font-family: var(--font-mono); font-size: 0.9rem; line-height: 1.6; white-space: pre-wrap; border: 2px dashed var(--accent-alert); border-radius: var(--radius-base); background: linear-gradient(rgba(var(--bg-secondary-rgb), 0.6), rgba(var(--bg-tertiary-rgb), 0.7)), repeating-linear-gradient(0deg, transparent, transparent 19px, rgba(var(--accent-alert-rgb), 0.08) 19px, rgba(var(--accent-alert-rgb), 0.08) 20px), repeating-linear-gradient(90deg, transparent, transparent 19px, rgba(var(--accent-alert-rgb), 0.08) 19px, rgba(var(--accent-alert-rgb), 0.08) 20px); background-size: cover, 20px 20px, 20px 20px; margin-top: 1.5rem; box-shadow: inset 0 0 15px rgba(var(--accent-alert-rgb), 0.2); position: relative; }
  .noResultsIcon { display: block; width: 40px; height: 40px; margin: 0 auto 0.8rem auto; border: 2px solid var(--accent-alert); animation: blink-icon 1.5s infinite steps(1); }
  @keyframes blink-icon { 50% { border-color: transparent; } }
  .noResultsText { display: block; text-shadow: 0 0 5px rgba(var(--accent-alert-rgb), 0.5); }
  .noResultsMessage::before { content: ":: TRANSMISSION ERROR ::"; display: block; color: var(--accent-alert); font-weight: bold; margin-bottom: 0.8rem; letter-spacing: 0.15em; font-size: 0.8em; text-shadow: 0 0 8px rgba(var(--accent-alert-rgb), 0.7); }